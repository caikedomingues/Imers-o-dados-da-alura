
# Import da biblioteca pandas que tem como objetivo acessar, carregar
# e manipular datasets.
import pandas as pd

# O streamlit √© uma biblioteca python que serve para construir
# aplica√ß√µes web interativas de forma muito r√°pida e simples, usando
# apenas c√≥digos Python. Ela serve para mostrar as nossas
# an√°lises para outras pessoas sem precisar compartilhar um
# notebook. O streamlit te permite transformar o seu c√≥digo
# em um dashboard interativo ou em uma aplica√ß√£o web.
# -> N√≥s podemos criar um dashboard que mostram seus gr√°ficos (sebaorn,
# plotly, etc).
# -> Voc√™ pode adicionar widgets como sliders, bot√µes e caixas de
# de sele√ß√£o, para que o usu√°rio possa interagir e alterar os dados
# que est√£o sendo visualizados.
# -> Tudo isso sem precisar de conhecimento em HTML, CSS ou JavaScript.
import streamlit as st

# Import da biblioteca plotly.express que tem como objetivo
# criar gr√°ficos interativos. 
import plotly.express as px

# import do nosso arquivo defun√ß√µes que ir√°
# carregar o dataset na mem√≥ria ja higienizado
# e preparado.
import funcoes

# Serve para configurar a p√°gina web como um todo. Devemos pensar
# nisso como o "setup" inicial do seu dashboard. Ela deve ser a
# primeira chamada streamlit no script.
st.set_page_config(
    
    # Define o titulo que aparece na aba do navegador
    page_title="Dashboard de Sal√°rios ma √Årea de Dados",
    
    # Define o icone (favicon) que aparece na aba do navegador. Usar
    # emojis √© uma forma simples e eficaz de fazer isso.
    page_icon="üìä",

    # O layout padr√£o do streamlit √© centralizado (centered), o que deixa
    # um espa√ßo em branco nas laterais. Ao usar "wide", voc√™ faz com que 
    # o conte√∫do do seu dashboard ocupe toda a largura disponivel da tela
    #, o que √© ideal para exibir gr√°ficos e tabelas grandes.
    layout="wide",

)

# Chamada da fun√ß√£o que ir√° carregar e preparar o dataset na mem√≥ria.
# O dataset ficara armazenado na vari√°vel 'base_de_dados'.
base_de_dados = funcoes.carregar_dados()

                        # Cria√ß√£o dos filtros do dashboard

# st.sidebar: √â um comando que permite adicionar componentes a uma barra lateral na sua aplica√ß√£o. Em vez de aparecerem no corpo principal da p√°gina, eles s√£o colocados em um menu lateral recolhivel

# header(): Cria um cabe√ßalho (titulo de se√ß√£o) na barra lateral. O
# texto "filtros" serve parav informar ao usu√°rio qual a fun√ß√£o daquela
# se√ß√£o do seu dashborad.
st.sidebar.header("Filtros")

# Ir√° ordenar os valores unicos da coluna 'ano' em ordem
# crescente.
# sorted: Fun√ß√£o do python que ordena os dados em ordem crescente/
# descrecente ou em ordem alfab√©tica.
# unique: Fun√ß√£o do pandas que tem como objetivo acessar os
# valores √∫nicos de uma coluna.
anos_disponiveis = sorted(base_de_dados['ano'].unique())

# st.sidebar.multiselect: Cria um widget que permite ao usu√°rio
# selecionar m√∫ltiplos itens a partir de uma lista. Ele √© perfeito
# para o que precisamos fazer, que √© filtrar dados por ano. A fun√ß√£o
# recebe como argumento:
# Ano: r√≥tulo que aparece √°cima do widget na barra lateral. Ele 
# informa ao usu√°rio o que ele est√° filtrando.
# anos_disponiveis: Esta √© a lista de op√ß√µes que o streamlit vai
# usar para preencher o widget. No seu caso, √© a lista de anos que
# criamos.
anos_selecionados = st.sidebar.multiselect("Ano", anos_disponiveis, default=anos_disponiveis)

# Acessando e organizando em ordem alfab√©tica os valores √∫nicos
# da coluna de senioridade.
senioridades_disponiveis = sorted(base_de_dados['senioridade'].unique())

# cria o widget que possibilita selecionar multiplos itens
# da coluna de senioridade com o objetivo de criar filtros de
# senioridade
senioridades_selecionadas = st.sidebar.multiselect('senioridade', senioridades_disponiveis, default=senioridades_disponiveis)

# # Acessando e organizando em ordem alfab√©tica os valores √∫nicos
# da coluna de contratos.
contratos_disponiveis = sorted(base_de_dados['Contrato'].unique())

# cria o widget que possibilita selecionar multiplos itens
# da coluna de senioridade com o objetivo de criar filtros de
# contratos
contratos_selecionados = st.sidebar.multiselect("Tipo de Contrato", contratos_disponiveis, default=contratos_disponiveis)

# Acessando e organizando em ordem alfab√©tica os valores √∫nicos
# da coluna de tamanhos de empresa.
tamanhos_disponiveis = sorted(base_de_dados['tamanho_empresa'].unique())

# cria o widget que possibilita selecionar multiplos itens
# da coluna de senioridade com o objetivo de criar filtros de
# tamanhos de empresa
tamanhos_selecionados = st.sidebar.multiselect("tamanho da empresa", tamanhos_disponiveis, default=tamanhos_disponiveis)

# Trecho respons√°vel por filtrar o DataFrame de acordo com as sele√ß√µes
# que o usu√°rio faz nos widgets da barra lateral.
# base_de_dados[...]: Forma padr√£o do pandas de filtrar DataFrame.
# O que est√° dentro dos colchetes √© uma mascara booleana, ou seja,
# uma s√©rie de valores True ou False que define quais linhas serao
# mantidas e quais ser√£o descartadas.
# isin: Tem como objetivo verificar se os valores selecionados
# pelos usu√°rios est√£o presentes na lista de op√ßoes. Ela retorna
# True se o valor estiver na lista e False caso contr√°rio.
base_de_dados_filtrado = base_de_dados[
    (base_de_dados['ano'].isin(anos_selecionados)) &
    (base_de_dados['senioridade'].isin(senioridades_selecionadas)) &
    (base_de_dados['Contrato'].isin(contratos_selecionados)) &
    (base_de_dados['tamanho_empresa'].isin(tamanhos_selecionados))
]

# Define o titulo do aplica√ß√£o web
st.title("üé≤ Dashboard de An√°lise de Sal√°rios na √Årea de Dados")

# Fun√ß√£o que tem como objetivo renderizar textos usando a sintaxe
# markdown (linha que fica em baixo do texto). Markdown √© uma 
# linguagem simpls para formata√ß√£o de texto que √© muito usado
# na web. No nosso caso, o texto que colocamos serve como 
# introdu√ß√£o clara para o nosso dashboard, explicando rapidamente
# o que ele faz e, mais importante, instruindo o usu√°rio a utilizar
# os filtros na barra lateral.
st.markdown("Explore os dados salariais na √°rea de dados nos √∫ltimos anos. Utilize os filtros √† esquerda para refinar sua an√°lise.")

# Serve para criar um subtitulo no cabe√ßalho
st.subheader("M√©tricas gerais (Sal√°rio anual em USD)")

# Bloco que serve para garantir que a aplica√ß√£o nao quebre caso o usu√°rio
# fa√ßa uma combina√ß√£o de filtros que n√£o retorne nenhum dado.

# if not base_de_dados_filtrado.empty: Caso a condi√ß√£o seja
# verdadeira, ou seja, se o DataFrame n√£o estiver v√°zio, iremos 
# apresentar os valores apresentados.
# empty: Fun√ß√£o do pandas que retorna True se o DataFrame estiver
# v√°zio (ou seja, n√£o tiver linhas).
# not: O not inverte a l√≥gica. Ent√£o, a condi√ß√£o completa significa: "se o DataFrame filtrado n√£o estiver vazio."
# mean: Retorna a m√©dia dos sal√°rios.
# max: Retorna o maior sal√°rio do DataFrame.
# shape[0]: Retorna o n√∫mero de linhas do DataFrame.
# mode: Retorna a moda da coluna de cargos, ou seja, o 
# cargo mais frequente (o que mais aparece) no DataFrame.
# else: Caso a condi√ß√£o seja verdadeira (se o DataFrame
# estiver v√°zio), vamos atribuir o valor 0 a vari√°veis num√©ricas
# e v√°zio para vari√°veis categ√≥ricas
if not base_de_dados_filtrado.empty:
    salario_medio = base_de_dados_filtrado['usd'].mean()
    salario_maximo = base_de_dados_filtrado['usd'].max()
    total_registros = base_de_dados_filtrado.shape[0]
    cargo_mais_frequente = base_de_dados_filtrado["cargo"].mode()[0]
else:
    
    salario_medio, salario_mediano, salario_maximo, total_registros, cargo_mais_comum = 0, 0, 0, ""

# st.columns(4): Ira organizar o espa√ßo principal da aplica√ß√£o
# em quatro colunas, e armazenamos cada uma delas nas variaveis
# col1, col2, col3 e col4. Isso nos d√° controle total sobre onde
# colocar o seu conte√∫do na tela.
# metric: Tem como objetivo criar um widget visualmente destacado
# com um r√≥tulo, um valor e (opcionalmente) uma diferen√ßa
# sal√°rio m√©dio: R√≥tulo do widget.
# salario_medio: vari√°vel que cont√©m o valor do widget
col1, col2, col3, col4 = st.columns(4)
col1.metric("Sal√°rio m√©dio", f"${salario_medio:,.0f}")
col2.metric("Sal√°rio m√°ximo", f"${salario_maximo:,.0f}")
col3.metric("Total de registros", f"{total_registros:,}")
col4.metric("Cargo mais frequente", cargo_mais_frequente)

st.markdown("---")


st.subheader("Gr√°ficos")

# Ira dividir o espa√ßo das vari√°veis col1 e col2
# em 2 colunas
col_graf1, col_graf2 = st.columns(2)

# with col_graf1: √â um context manager do streamlit que te permite
# colocar todo o conte√∫do que voc√™ escrever dentro dele, na coluna 
# que voc√™ definiu. √â a forma mais limpa de organizar o layout.  
with col_graf1:
    
    # Novamente, estamos usando a verifica√ß√£o de seguran√ßa que evita
    # que o c√≥digo quebre quando o usu√°rio seleciona filtros que 
    # n√£o retornam nenhum dado.
    if not base_de_dados_filtrado.empty:
        
        # groupby('cargo')['usd'].mean(): Primeiro, vamos agrupar os
        # dados por cargo e calcular m√©dias dos sala¬¥rios de cada cargo
        
        # nlargest(10): Ir√° selecionar os 10 maiores sal√°rios m√©dios.
        
        # sort_values(ascending=True): Ir√° organizar os dados em forma
        # decrescente.
        
        # reset_index: Ir√° criar uma coluna que ir√° conter os indices
        # dos cargos 
        top_cargos = base_de_dados_filtrado.groupby('cargo')['usd'].mean().nlargest(10).sort_values(ascending=True).reset_index()
        
        # Ir√° construir o gr√°fico de barras inter√°tivo
        grafico_cargos = px.bar(
            top_cargos,
            x='usd',
            y='cargo',
            orientation='h',
            title="Top 10 cargos por sal√°rio m√©dio",
            labels={'usd': 'M√©dia salarial anual (USD)', 'cargo': ''}
        )
        
        # Ira ajustar a posi√ß√£o do titulo e, mais importante, garantindo
        # que a ordem das categorias no eixo Y (yaxis) respeite a ordem
        # que voc√™ j√° definiu com o  Pandasm o que √© fundamental para a
        # visualiza√ß√£o dos dados.
        grafico_cargos.update_layout(title_x=0.1, yaxis={'categoryorder':'total ascending'})
        
        # Esta √© a fun√ß√£o que pega a sua figura do plotly e a renderiza na coluna do streamlit
        st.plotly_chart(grafico_cargos, use_container_width=True)
    else:
        
        # Ira apresentar uma mensagem de erro caso a constru√ß√£o do gr√°fico n√£o d√™ certo.
        st.warning("Nenhum dado para exibir no gr√°fico de cargos.")
# Conte√∫do da coluna 2
with col_graf2:
    
    # Verificando se o DataFrane est√° v√°zio.
    if not base_de_dados_filtrado.empty:
        
        # Se ele n√£o estiver v√°zio vamos criar o gr√°fico de pizza
        # interativo utilizando a biblioteca plotly
        grafico_hist = px.histogram(
            base_de_dados_filtrado,
            x='usd',
            nbins=30,
            title="Distribui√ß√£o de sal√°rios anuais",
            labels={'usd': 'Faixa salarial (USD)', 'count': ''}
        )
        
        # Ira ajustar o titulo do gr√°fico.
        grafico_hist.update_layout(title_x=0.1)
        
        # Ir√° renderizar a coluna na aplica√ß√£o
        st.plotly_chart(grafico_hist, use_container_width=True)
    else:
        
        # Mensagem de erro que ir√° ser exibida caso a constru√ß√£o do
        # gr√°fico falhe.
        st.warning("Nenhum dado para exibir no gr√°fico de distribui√ß√£o.")

# Ira dividir o espa√ßo das vari√°veis col3 e col4
# em 2 colunas
col_graf3, col_graf4 = st.columns(2)

# Conte√∫do da coluna 3
with col_graf3:
    
    # Ira verificar se o DataFrame n√£o est√° v√°zio
    if not base_de_dados_filtrado.empty:
        
        # Ira contar a frequ√™ncia de cada valor√∫nico da coluna e
        # criara uma coluna que ira conter um indice dos valores
        # da coluna
        remoto_contagem = base_de_dados_filtrado['remoto'].value_counts().reset_index()
        
        # Ira renomear os valores das colunas.
        remoto_contagem.columns = ['tipo_trabalho', 'quantidade']
        
        # Ir√° construir um gr√°fico de pizza interativo 
        grafico_remoto = px.pie(
            remoto_contagem,
            names='tipo_trabalho',
            values='quantidade',
            title='Propor√ß√£o dos tipos de trabalho',
            hole=0.5  
        )
        # Ir√° mostrar no gr¬¥fico de piza o percentual dos dados 
        # e os seus r√≥tulos
        grafico_remoto.update_traces(textinfo='percent+label')
        
        # Ira ajustar a posi√ß√£o do titulo do gr√°fico.
        grafico_remoto.update_layout(title_x=0.1)
        
        # Ir√° renderizar a coluna na aplica√ß√£o
        st.plotly_chart(grafico_remoto, use_container_width=True)
    else:
        
        # Mensagem que ser√° exibida caso a constru√ß√£o do gr√°fico falhe
        st.warning("Nenhum dado para exibir no gr√°fico dos tipos de trabalho.")


# Agora vamos usar essa outra base de dados que iremos modificar um pouco
# para aprender outras t√©cnicas e m√©todos.

# Acessando e carregando o dataset usando o pandas
df = pd.read_csv('dados-imersao-final.csv')

# biblioteca de Python que serve como uma fonte de dados padronizada sobre pa√≠ses.

# Pense nele como um grande dicion√°rio ou banco de dados que cont√©m informa√ß√µes oficiais e padronizadas sobre todos os pa√≠ses do mundo.
import pycountry

# Define uma fun√ß√£o chamada iso2_to_iso3 que tem um objetivo claro: converter um c√≥digo de pa√≠s de duas letras (Alpha-2) para um c√≥digo de tr√™s letras (Alpha-3), que √© um padr√£o frequentemente usado em bibliotecas de visualiza√ß√£o como o Plotly.
def iso2_to_iso3(code):
    
    try:
        # Dentro do bloco de tratamento de erros usamos a a biblioteca pycountry para encontrar o pa√≠s com base no c√≥digo de duas letras (alpha_2) e, se encontrar, retorna o c√≥digo de tr√™s letras (alpha_3).
        return pycountry.countries.get(alpha_2=code).alpha_3

    except:
        # Se o pycountry n√£o encontrar um pa√≠s para o c√≥digo que voc√™ forneceu (por exemplo, se o c√≥digo for inv√°lido), a execu√ß√£o do try falha. O programa, em vez de gerar um erro e parar, "pula" para o bloco except e executa o c√≥digo que est√° l√°, retornando o valor None de forma segura.
        return None

# Vamos criar uma nova coluna que ir√° conter as siglas de 3 digitos
# de cada pais:
# df['residencia_iso_3']: Cria√ß√£o da nova coluna que ir√° receber
# os valores
# df['residencia']: Valores que ir√£o compor a nova coluna
# apply: Fun√ß√£o do pandas que tem como objetivo aplicar
# fun√ß√µes em cada linha de uma determinada coluna. A
# fun√ß√£o recebe como argumento a fun√ß√£o que ser√° aplicada
# nas linhas.
# iso2_to_iso3: Fun√ß√£o que ser√° aplicada nas linhas da coluna
df['residencia_iso_3'] = df['residencia'].apply(iso2_to_iso3)

# Vari√°vel que ir√° conter um filtro que ir√° pegar apenas os dados
# do cargo de 'Data Scientist'
df_ds = df[df['cargo'] == 'Data Scientist']

# Vamoa agora agrupar os dados filtrados e calcular a m√©dia 
# do sal√°rio de pessoas que ocupam o cargo de Data Scientist.
# Ap√≥s realizar o agrupamento e o c√°lculo da m√©dia, vamos criar
# uma coluna que ir√° conter o indice das linhas da coluna cargo
media_ds_pais = df_ds.groupby('residencia_iso_3')['usd'].mean().reset_index()

# Fun√ß√£o que cria um mapa coropl√©tico: Mapas clorop√©ticos s√£o mapas
# onde as √°reas geogr√°ficas (no nosso caso, os paises) s√£o coloridas
# com base no valor de uma varo√°vel estatistica (no seu caso, o sal√°rio
# m√©dio). √â a forma ideal de visualizar a distribui√ß√£o de dados por regi√£o
fig = px.choropleth(
    
    # Dados que ser√£o mapeados
    media_ds_pais,
    
    # Diz ao plotly qual coluna do dataframe cont√©m os c√≥digos de 
    # pais para identificar cada √°rea.
    locations = 'residencia_iso_3',
    
    # Define qual coluna num√©rica ser√° usada para determinar a cor do pais.
    color = 'usd',
    
    # Define a escala de cores.No nosso caso escolhemos a rdylgn (Red-Yellow-Green)
    color_continuous_scale='rdylgn',
    
    title = 'Sal√°rio M√©dio de Cientista de Dados por Pais',
    
    
    labels = {'usd': 'Sal√°rio M√©dio (USD)', 'residencia_iso_3': 'Pais'}
    
)


fig.show()


# Ir√° conter o conte√∫do da coluna 4
with col_graf4:
    # Ura verificar se o dataset n√£o est√° v√°zio
    if not df.empty:
        #  Ir√° filtrar o cargo de 'Data Scientist' do dataframe
        df_ds = df[df['cargo'] == 'Data Scientist']
        # Ira agrupar os dados por residencia, calcular a m√©dia
        # dos salarios em cada pais e criar√° uma coluna para os 
        # indices de cada pais
        media_ds_pais = df_ds.groupby('residencia_iso_3')['usd'].mean().reset_index()
        
        # Vari√°vel que ir√° conter a constru√ß√£o do mapa coropl√©tico
        grafico_paises = px.choropleth(media_ds_pais,
            locations='residencia_iso_3',
            color='usd',
            color_continuous_scale='rdylgn',
            title='Sal√°rio m√©dio de Cientista de Dados por pa√≠s',
            labels={'usd': 'Sal√°rio m√©dio (USD)', 'residencia_iso_3': 'Pa√≠s'})
        # Ir√° ajustar o texto do gr√°fico
        grafico_paises.update_layout(title_x=0.1)
        
        # Ir√° renderizar a coluna
        st.plotly_chart(grafico_paises, use_container_width=True)
    else:
        
        # Mensagem que ser√° exibida caso a constru√ß√£o do gr√°fico d√™ errado.
        st.warning("Nenhum dado para exibir no gr√°fico de pa√≠ses.") 

# --- Tabela de Dados Detalhados ---
st.subheader("Dados Detalhados")

# Ira exibir o dataframe no dashboard
st.dataframe(base_de_dados_filtrado)